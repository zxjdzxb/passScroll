import{_ as s,o as a,c as l,Q as n}from"./chunks/framework.2576a40d.js";const o="/passScroll/assets/yahu.f229bfa0.png",b=JSON.parse('{"title":"性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"interview/performance.md","filePath":"interview/performance.md","lastUpdated":1702543449000}'),e={name:"interview/performance.md"},p=n('<h1 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h1><p><img src="'+o+`" alt="雅虎军规"></p><h2 id="网络优化" tabindex="-1">网络优化 <a class="header-anchor" href="#网络优化" aria-label="Permalink to &quot;网络优化&quot;">​</a></h2><details class="details custom-block"><summary>答案</summary><h3 id="dns预解析" tabindex="-1">DNS预解析 <a class="header-anchor" href="#dns预解析" aria-label="Permalink to &quot;DNS预解析&quot;">​</a></h3><ul><li>当我们输入url访问一个网页后，第一步会进行DNS查询，通过DNS得到IP地址。</li><li>想让DNS查询更快，可以花钱购买一些更快的DNS服务，但没有必要。</li><li>一般是配置hosts，自己把ip配置好。DNS就会读取系统hosts文件，查找其中是否有对应的ip。 使用HTML头部的<link rel="dns-prefetch" href="…">可以帮助你提前获取DNS记录</li></ul><h3 id="使用cdn" tabindex="-1">使用CDN <a class="header-anchor" href="#使用cdn" aria-label="Permalink to &quot;使用CDN&quot;">​</a></h3><p>静态css/js/img等资源可以做cdn缓存，这样把资源同步到全国全球各地，用户就能更快访问到</p><h3 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-label="Permalink to &quot;浏览器缓存&quot;">​</a></h3></details><h2 id="代码压缩" tabindex="-1">代码压缩 <a class="header-anchor" href="#代码压缩" aria-label="Permalink to &quot;代码压缩&quot;">​</a></h2><details class="details custom-block"><summary>答案</summary><h3 id="开启-gzip-压缩" tabindex="-1">开启 gzip 压缩 <a class="header-anchor" href="#开启-gzip-压缩" aria-label="Permalink to &quot;开启 gzip 压缩&quot;">​</a></h3><p><code>gzip</code> 是 <code>GNUzip</code> 的缩写，最早用于 UNIX 系统的文件压缩。HTTP 协议上的 <code>gzip</code> 编码是一种用来改进 web 应用程序性能的技术，Web 服务器和客户端（浏览器）必须共同支持 <code>gzip</code> 。目前主流的浏览器，Chrome，firefox，IE等都支持该协议。常见的服务器如 Apache，Nginx，IIS 同样支持， <code>gzip</code> 压缩效率非常高，通常可以达到 70% 的压缩率，也就是说，如果你的网页有 30K，压缩之后就变成了 9K 左右</p><h3 id="webpack-压缩" tabindex="-1">Webpack 压缩 <a class="header-anchor" href="#webpack-压缩" aria-label="Permalink to &quot;Webpack 压缩&quot;">​</a></h3><p>在 webpack 可以使用如下插件进行压缩：</p><ul><li>JavaScript：<code>UglifyPlugin</code></li><li>CSS ：<code>MiniCssExtractPlugin</code></li><li>HTML：<code>HtmlWebpackPlugin</code></li></ul></details><h2 id="javascript中的性能优化" tabindex="-1">JavaScript中的性能优化 <a class="header-anchor" href="#javascript中的性能优化" aria-label="Permalink to &quot;JavaScript中的性能优化&quot;">​</a></h2><details class="details custom-block"><summary>答案</summary><h3 id="防抖和节流-resize-scroll-input-。" tabindex="-1">防抖和节流（resize，scroll，input）。 <a class="header-anchor" href="#防抖和节流-resize-scroll-input-。" aria-label="Permalink to &quot;防抖和节流（resize，scroll，input）。&quot;">​</a></h3><h3 id="使用事件委托-简化dom操作" tabindex="-1">使用事件委托（简化DOM操作） <a class="header-anchor" href="#使用事件委托-简化dom操作" aria-label="Permalink to &quot;使用事件委托（简化DOM操作）&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt; 苹果 &lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt; 香蕉 &lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt; 凤梨 &lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt; ​</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// good</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ul&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">onclick</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">target</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.target</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (target.nodeName </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;LI&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(target.innerHTML)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }​</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// bad</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.</span><span style="color:#B392F0;">querySelectorAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    e.</span><span style="color:#B392F0;">onclick</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.innerHTML)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt; 苹果 &lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt; 香蕉 &lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt; 凤梨 &lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt; ​</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// good</span></span>
<span class="line"><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ul&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">onclick</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">target</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.target</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (target.nodeName </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;LI&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(target.innerHTML)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }​</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// bad</span></span>
<span class="line"><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">onclick</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.innerHTML)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="css-放-js-脚本放-最底部。" tabindex="-1">css 放 ，js 脚本放 最底部。 <a class="header-anchor" href="#css-放-js-脚本放-最底部。" aria-label="Permalink to &quot;css 放 ，js 脚本放 最底部。&quot;">​</a></h3><ul><li>由于用户浏览网页是先看再进行操作，所以先把css加载出来有利于客户的使用体验。</li></ul><p>延迟JavaScript</p><p><code>defer</code> 属性告诉浏览器在 HTML 解析器解析完文档之后运行脚本，但在事件发生之前， <code>DOMContentLoaded</code> 会被触发。</p></details><h2 id="页面渲染优化" tabindex="-1">页面渲染优化 <a class="header-anchor" href="#页面渲染优化" aria-label="Permalink to &quot;页面渲染优化&quot;">​</a></h2><details class="details custom-block"><summary>答案</summary><h3 id="避免css、js阻塞" tabindex="-1">避免CSS、JS阻塞 <a class="header-anchor" href="#避免css、js阻塞" aria-label="Permalink to &quot;避免CSS、JS阻塞&quot;">​</a></h3><h3 id="使用字体图标-iconfont-代替图片图标" tabindex="-1">使用字体图标 iconfont 代替图片图标 <a class="header-anchor" href="#使用字体图标-iconfont-代替图片图标" aria-label="Permalink to &quot;使用字体图标 iconfont 代替图片图标&quot;">​</a></h3><p>字体图标就是将图标制作成一个字体，使用时就跟字体一样，可以设置属性，例如 font-size、color 等等，非常方便。并且字体图标是矢量图，不会失真</p><h3 id="降低-css-选择器的复杂性" tabindex="-1">降低 CSS 选择器的复杂性 <a class="header-anchor" href="#降低-css-选择器的复杂性" aria-label="Permalink to &quot;降低 CSS 选择器的复杂性&quot;">​</a></h3><ol><li>减少嵌套。后代选择器的开销是最高的，因此我们应该尽量将选择器的深度降到最低（最高不要超过三层），尽可能使用类来关联每一个标签元素</li><li>关注可以通过继承实现的属性，避免重复匹配重复定义</li><li>尽量使用高优先级的选择器，例如 ID 和类选择器。</li><li>避免使用通配符，只对需要用到的元素进行选择</li></ol><h3 id="减少回流-重排-和重绘。" tabindex="-1">减少回流（重排）和重绘。 <a class="header-anchor" href="#减少回流-重排-和重绘。" aria-label="Permalink to &quot;减少回流（重排）和重绘。&quot;">​</a></h3><h4 id="_7-4-1-重绘-repaint" tabindex="-1">7.4.1 重绘 (Repaint) <a class="header-anchor" href="#_7-4-1-重绘-repaint" aria-label="Permalink to &quot;7.4.1 重绘 (Repaint)&quot;">​</a></h4><p>当页面中元素样式的改变并不影响它在文档流中的位置时（例如：color、background-color、visibility等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘</p><h4 id="_7-4-2-回流-reflow" tabindex="-1">7.4.2 回流 (Reflow) <a class="header-anchor" href="#_7-4-2-回流-reflow" aria-label="Permalink to &quot;7.4.2 回流 (Reflow)&quot;">​</a></h4><p>当Render Tree中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。</p><p><strong>回流必将引起重绘，重绘不一定会引起回流，回流比重绘的代价要更高。</strong></p><h2 id="图片资源优化" tabindex="-1">图片资源优化 <a class="header-anchor" href="#图片资源优化" aria-label="Permalink to &quot;图片资源优化&quot;">​</a></h2><h3 id="使用雪碧图" tabindex="-1">使用雪碧图 <a class="header-anchor" href="#使用雪碧图" aria-label="Permalink to &quot;使用雪碧图&quot;">​</a></h3><p>雪碧图的作用就是减少请求数，而且多张图片合在一起后的体积会少于多张图片的体积总和，这也是比较通用的图片压缩方案</p><h3 id="图片懒加载" tabindex="-1">图片懒加载 <a class="header-anchor" href="#图片懒加载" aria-label="Permalink to &quot;图片懒加载&quot;">​</a></h3><p>在图片即将进入可视区域的时候进行加载（判断图片进入可视区域请参考<a href="https://juejin.cn/post/7178783712363708475#heading-28" target="_blank" rel="noreferrer">这里</a>）</p><h3 id="使用css3代替图片" tabindex="-1">使用CSS3代替图片 <a class="header-anchor" href="#使用css3代替图片" aria-label="Permalink to &quot;使用CSS3代替图片&quot;">​</a></h3><p>有很多图片使用 CSS 效果（渐变、阴影等）就能画出来，这种情况选择 CSS3 效果更好</p><h3 id="图片压缩" tabindex="-1">图片压缩 <a class="header-anchor" href="#图片压缩" aria-label="Permalink to &quot;图片压缩&quot;">​</a></h3><p>压缩方法有两种，一是通过在线网站进行压缩，二是通过 webpack 插件 image-webpack-loader。它是基于 <a href="https://link.juejin.cn/?target=https%3A%2F%2Flink.segmentfault.com%2F%3Fenc%3D6SFBEjb9%2FrzIZGfOUStOJw%3D%3D.%2Bf0Zw4j1CQG%2B3h9FDEUcmMrWACqiCYz06EmP4BxMagRAdgpHKY5LqwmVWYq9L%2FENvVhS9SUbVatpPn6kZMHKp%2B%2FxXnsenceQ5QcMKwcb8ks%3D" target="_blank" rel="noreferrer">imagemin</a> 这个 Node 库来实现图片压缩的。</p><h4 id="使用-webp-格式的图片" tabindex="-1">使用 webp 格式的图片 <a class="header-anchor" href="#使用-webp-格式的图片" aria-label="Permalink to &quot;使用 webp 格式的图片&quot;">​</a></h4><p><code>WebP</code> 是 Google 团队开发的加快图片加载速度的图片格式，其优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都相当优秀、稳定和统一。</p></details><h2 id="webpack-优化" tabindex="-1">Webpack 优化 <a class="header-anchor" href="#webpack-优化" aria-label="Permalink to &quot;Webpack 优化&quot;">​</a></h2><details class="details custom-block"><summary>答案</summary><ul><li><code>减小代码体积</code></li><li><code>babel-plugin-transform-runtime</code>减少ES6转化ES5的冗余</li><li><code>按需加载</code></li><li><code>提取第三库代码</code></li><li><code>模板预编译</code></li><li><code>webpack dll优化</code></li></ul></details>`,12),t=[p];function c(r,i,E,y,d,h){return a(),l("div",null,t)}const m=s(e,[["render",c]]);export{b as __pageData,m as default};
