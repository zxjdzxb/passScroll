import{_ as e,o as l,c as o,k as s,t,Q as a}from"./chunks/framework.2576a40d.js";const A=JSON.parse('{"title":"Vue","description":"","frontmatter":{},"headers":[],"relativePath":"interview/vue.md","filePath":"interview/vue.md","lastUpdated":1701254135000}'),n={name:"interview/vue.md"},i=a("",7),p={class:"details custom-block"},r=s("summary",null,"答案",-1),c=s("p",null,"Vue 实现响应式主要是采用数据劫持结合发布者-订阅者模式的方式。具体实现就是整合 Observer，Compiler 和 Watcher 三者。",-1),d=s("ul",null,[s("li",null,"Observer")],-1),u=s("p",null,"在 Vue 2 中是通过 ES5 的 Object.defineProperty() 方法实现。",-1),h=s("p",null,"在 Vue 3 中是通过 ES6 的 new Proxy() 实现的。",-1),y=s("ul",null,[s("li",null,"Compiler")],-1),E=s("ul",null,[s("li",null,"Watcher")],-1),m=s("p",null,"发布者/订阅者。Watcher 作为连接 Observer 和 Compiler 的桥梁，能够订阅并收到每个属性变动的通知，然后执行相应的回调函数。Compiler 在编译时通过 Watcher 绑定对应的数据更新回调函数，Observer 在监听到数据变化时执行此回调。在 Observer 中，Watcher 就是订阅者，在 Compiler 中，Watcher 就是发布者。",-1),g=a("",30);function b(v,k,P,f,q,x){return l(),o("div",null,[i,s("details",p,[r,c,d,u,h,y,s("p",null,"模板编译器。它的作用是对每个元素节点的指令 v- 和模板语法 "+t()+" 进行扫描，替换对应的真实数据，或绑定相应的事件函数。",1),E,m]),g])}const _=e(n,[["render",b]]);export{A as __pageData,_ as default};
